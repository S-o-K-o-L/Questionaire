// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Questionnaire.Entities;

#nullable disable

namespace Questionnaire.Entities.Migrations
{
    [DbContext(typeof(QuestionnaireContext))]
    [Migration("20221111022426_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Questionnaire.Entities.Models.Element", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("elements", (string)null);
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.ElementOnForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("FormId");

                    b.ToTable("elements_on_form", (string)null);
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("forms", (string)null);
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("results", (string)null);
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.ResultOnQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ElementOnFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VariantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ElementOnFormId");

                    b.HasIndex("ResultId");

                    b.HasIndex("VariantId");

                    b.ToTable("results_on_question", (string)null);
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Variant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ElementOnFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VariantText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ElementOnFormId");

                    b.ToTable("variants", (string)null);
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.ElementOnForm", b =>
                {
                    b.HasOne("Questionnaire.Entities.Models.Element", "Element")
                        .WithMany("ElementOnForms")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Questionnaire.Entities.Models.Form", "Form")
                        .WithMany("ElementOnForms")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Form", b =>
                {
                    b.HasOne("Questionnaire.Entities.Models.User", "User")
                        .WithMany("Forms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Result", b =>
                {
                    b.HasOne("Questionnaire.Entities.Models.Form", "Form")
                        .WithMany("Results")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Questionnaire.Entities.Models.User", "User")
                        .WithMany("Results")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.ResultOnQuestion", b =>
                {
                    b.HasOne("Questionnaire.Entities.Models.ElementOnForm", "ElementOnForm")
                        .WithMany("ResultOnQuestions")
                        .HasForeignKey("ElementOnFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Questionnaire.Entities.Models.Result", "Result")
                        .WithMany("ResultOnQuestions")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Questionnaire.Entities.Models.Variant", "Variant")
                        .WithMany("ResultOnQuestions")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ElementOnForm");

                    b.Navigation("Result");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Variant", b =>
                {
                    b.HasOne("Questionnaire.Entities.Models.ElementOnForm", "ElementOnForm")
                        .WithMany("Variants")
                        .HasForeignKey("ElementOnFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementOnForm");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Element", b =>
                {
                    b.Navigation("ElementOnForms");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.ElementOnForm", b =>
                {
                    b.Navigation("ResultOnQuestions");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Form", b =>
                {
                    b.Navigation("ElementOnForms");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Result", b =>
                {
                    b.Navigation("ResultOnQuestions");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.User", b =>
                {
                    b.Navigation("Forms");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Questionnaire.Entities.Models.Variant", b =>
                {
                    b.Navigation("ResultOnQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
